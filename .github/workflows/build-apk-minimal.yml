name: Build APK (Minimal)

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build Type'
        required: true
        default: 'debug'
        type: choice
        options:
          - debug
          - release

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 33
        build-tools: 33.0.0
    
    - name: Install Node dependencies
      working-directory: ./frontend
      run: |
        npm ci || npm install
    
    - name: Create Minimal App.tsx
      working-directory: ./frontend
      run: |
        echo "=== Creating minimal App.tsx without dependencies ==="
        
        cat > src/App.tsx << 'EOF'
import React from 'react';
import './App.css';

function App() {
  return (
    <div style={{
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'center',
      justifyContent: 'center',
      minHeight: '100vh',
      backgroundColor: '#f5f5f0',
      fontFamily: 'Arial, sans-serif',
      padding: '20px',
      textAlign: 'center'
    }}>
      <div style={{
        backgroundColor: 'white',
        padding: '40px',
        borderRadius: '20px',
        boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',
        maxWidth: '400px',
        width: '100%'
      }}>
        <h1 style={{
          color: '#6b5b8c',
          fontSize: '32px',
          marginBottom: '20px'
        }}>
          ElderWise
        </h1>
        <p style={{
          color: '#666',
          fontSize: '18px',
          marginBottom: '30px'
        }}>
          Your AI companion for health and wellness
        </p>
        <div style={{
          backgroundColor: '#b8a9e0',
          color: 'white',
          padding: '15px 30px',
          borderRadius: '10px',
          fontSize: '16px',
          cursor: 'pointer',
          transition: 'background-color 0.3s'
        }}>
          Welcome
        </div>
      </div>
      <p style={{
        marginTop: '20px',
        color: '#999',
        fontSize: '14px'
      }}>
        Version 1.0.0
      </p>
    </div>
  );
}

export default App;
EOF
        
        # Create a minimal App.css if it doesn't exist
        if [ ! -f "src/App.css" ]; then
          cat > src/App.css << 'EOF'
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
EOF
        fi
        
        # Fix index.html
        echo "=== Fixing index.html ==="
        # Remove vite.svg favicon
        sed -i '/<link rel="icon".*vite\.svg/d' index.html
        # Remove manifest link
        sed -i '/<link rel="manifest"/d' index.html
        # Update title
        sed -i 's/<title>.*<\/title>/<title>ElderWise<\/title>/g' index.html
    
    - name: Remove PWA and problematic files
      working-directory: ./frontend
      run: |
        echo "=== Removing problematic files ==="
        rm -f public/sw.js public/manifest.json
        rm -f public/vite.svg
        
        # Create a simple favicon if needed
        if [ ! -f "public/favicon.ico" ]; then
          # Create minimal favicon
          printf '\x00\x00\x01\x00\x01\x00\x01\x01\x00\x00\x01\x00\x18\x00\x30\x00\x00\x00\x16\x00\x00\x00' > public/favicon.ico
        fi
    
    - name: Build React app
      working-directory: ./frontend
      run: |
        echo "=== Building with minimal App ==="
        npm run build
        
        # Fix paths in built files
        echo "=== Fixing paths in dist/index.html ==="
        if [ -f "dist/index.html" ]; then
          sed -i 's|href="/|href="./|g' dist/index.html
          sed -i 's|src="/|src="./|g' dist/index.html
        fi
    
    - name: Install Capacitor CLI
      run: npm install -g @capacitor/cli
    
    - name: Setup Capacitor Configuration
      working-directory: ./frontend
      run: |
        # Choose configuration based on build type
        if [ "${{ inputs.build_type }}" == "debug" ]; then
          if [ -f "capacitor.config.debug.json" ]; then
            cp capacitor.config.debug.json capacitor.config.json
          fi
        else
          if [ -f "capacitor.config.release.json" ]; then
            cp capacitor.config.release.json capacitor.config.json
          fi
        fi
        
        # Clean start
        rm -rf android
        npx cap add android
        npx cap sync android
    
    - name: Build APK
      working-directory: ./frontend/android
      run: |
        chmod +x gradlew
        ./gradlew clean
        ./gradlew app:assembleDebug --no-daemon --stacktrace
    
    - name: Process APK
      id: apk
      run: |
        APK_PATH=$(find frontend/android -name "*.apk" -type f | head -1)
        
        if [ -z "$APK_PATH" ]; then
          echo "ERROR: APK not found!"
          exit 1
        fi
        
        # Create filename
        TIMESTAMP=$(date +%Y%m%d_%H%M)
        BUILD_NUMBER=${{ github.run_number }}
        
        if [ "${{ inputs.build_type }}" == "debug" ]; then
          APK_NAME="ElderWise-Debug-Minimal-${BUILD_NUMBER}-${TIMESTAMP}.apk"
        else
          APK_NAME="ElderWise-Release-Minimal-${BUILD_NUMBER}-${TIMESTAMP}.apk"
        fi
        
        NEW_PATH="frontend/android/app/build/outputs/apk/debug/${APK_NAME}"
        mkdir -p $(dirname "$NEW_PATH")
        cp "$APK_PATH" "$NEW_PATH"
        
        echo "apk_path=$NEW_PATH" >> $GITHUB_OUTPUT
        echo "apk_name=$APK_NAME" >> $GITHUB_OUTPUT
        
        # Show APK info
        ls -lh "$NEW_PATH"
        echo "apk_size=$(du -h "$NEW_PATH" | cut -f1)" >> $GITHUB_OUTPUT
    
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: elderwise-${{ inputs.build_type }}-minimal-${{ github.run_number }}
        path: ${{ steps.apk.outputs.apk_path }}
        retention-days: 30
    
    - name: Build Summary
      run: |
        echo "## ðŸ“± Minimal APK Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Build Info" >> $GITHUB_STEP_SUMMARY
        echo "- **Type:** ${{ inputs.build_type }}" >> $GITHUB_STEP_SUMMARY
        echo "- **File:** ${{ steps.apk.outputs.apk_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Size:** ${{ steps.apk.outputs.apk_size }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### What This Build Contains" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… Minimal ElderWise UI" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… No external dependencies" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… No vite.svg errors" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… Clean build without missing modules" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "This is a minimal build to verify APK generation works!" >> $GITHUB_STEP_SUMMARY