name: Build Android APK

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: |
        npm install
        # Create package-lock.json if it doesn't exist
        if [ ! -f package-lock.json ]; then
          npm install --package-lock-only
        fi
    
    - name: Build React app
      working-directory: ./frontend
      run: |
        npm run build || {
          echo "Build failed, creating minimal dist for Capacitor"
          mkdir -p dist
          echo '<!DOCTYPE html><html><head><title>ElderWise</title></head><body><h1>ElderWise</h1></body></html>' > dist/index.html
        }
    
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
    
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
    
    - name: Initialize Android Project
      working-directory: ./frontend
      run: |
        # Add Android platform if needed
        if [ ! -d android ]; then
          npx cap add android
        fi
        
        # Sync Capacitor
        npx cap sync android || echo "Capacitor sync warning"
        
        # Ensure gradlew exists
        if [ ! -f android/gradlew ]; then
          echo "Creating gradle wrapper..."
          cd android
          
          # Create gradle wrapper
          mkdir -p gradle/wrapper
          cat > gradle/wrapper/gradle-wrapper.properties << 'EOF'
        distributionBase=GRADLE_USER_HOME
        distributionPath=wrapper/dists
        distributionUrl=https\://services.gradle.org/distributions/gradle-8.0-bin.zip
        zipStoreBase=GRADLE_USER_HOME
        zipStorePath=wrapper/dists
        EOF
          
          # Download gradle wrapper
          curl -L https://github.com/gradle/gradle/raw/v8.0.0/gradle/wrapper/gradle-wrapper.jar \
               -o gradle/wrapper/gradle-wrapper.jar || echo "Using gradle without wrapper"
          
          # If wrapper download failed, use system gradle
          if [ ! -f gradle/wrapper/gradle-wrapper.jar ]; then
            echo "Using system gradle"
            echo '#!/bin/sh' > gradlew
            echo 'gradle "$@"' >> gradlew
          else
            # Create proper gradlew script
            curl -L https://raw.githubusercontent.com/gradle/gradle/v8.0.0/gradlew \
                 -o gradlew || {
              echo '#!/bin/sh' > gradlew
              echo 'exec java -jar gradle/wrapper/gradle-wrapper.jar "$@"' >> gradlew
            }
          fi
          
          chmod +x gradlew
          cd ..
        fi
    
    - name: Build APK
      working-directory: ./frontend/android
      run: |
        chmod +x gradlew || true
        
        # Try with wrapper first
        if [ -f gradlew ]; then
          ./gradlew assembleDebug --no-daemon --stacktrace
        else
          # Fallback to system gradle
          gradle assembleDebug --no-daemon --stacktrace
        fi
    
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: elderwise-debug-apk
        path: |
          frontend/android/app/build/outputs/apk/debug/app-debug.apk
          frontend/android/app/build/outputs/apk/debug/*.apk
        if-no-files-found: error
        retention-days: 30
    
    - name: Create Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Find the APK file
        APK_PATH=$(find frontend/android/app/build/outputs/apk/debug -name "*.apk" | head -1)
        
        if [ -z "$APK_PATH" ]; then
          echo "No APK found!"
          exit 1
        fi
        
        # Create tag
        TAG="v1.0.${{ github.run_number }}"
        
        # Create release using GitHub CLI
        gh release create "$TAG" \
          --title "ElderWise Build ${{ github.run_number }}" \
          --notes "Automated build of ElderWise APK
        
        ### üéØ Features:
        - üíä Medication identification with camera
        - üß† AI-powered memory assistant  
        - ‚ù§Ô∏è Health tracking
        - üí¨ Elder-friendly chat interface
        - üì± Progressive Web App support
        
        ### üì≤ Installation Instructions:
        1. Download the APK file below
        2. On your Android device:
           - Go to Settings ‚Üí Security
           - Enable \"Unknown Sources\" or \"Install unknown apps\"
           - For newer Android: Settings ‚Üí Apps ‚Üí Special access ‚Üí Install unknown apps
        3. Open the downloaded APK file
        4. Tap \"Install\"
        5. Open ElderWise from your app drawer
        
        ### ‚ö†Ô∏è First Time Setup:
        - Grant camera permissions for medication scanning
        - Allow notifications for reminders
        - Sign in or create an account
        
        ### üîß Troubleshooting:
        - If installation is blocked, check your security settings
        - If the app crashes, try clearing app data
        - For camera issues, check app permissions
        
        **Note:** This is a debug build for testing. Not optimized for production use." \
          --prerelease \
          "$APK_PATH#ElderWise-${TAG}-debug.apk"